"""Microsoft Office document parsing with Marker"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/01.parsing.ms_office.marker.ipynb.

# %% auto 0
__all__ = ['OPENROUTER_API_KEY', 'OPENROUTER_API_URL', 'OPENROUTER_MODEL', 'convert_office_to_pdf', 'convert_excel_to_markdown',
           'convert_pdf_to_markdown_with_marker', 'convert_excel_to_markdown_with_marker']

# %% ../../../nbs/01.parsing.ms_office.marker.ipynb 4
import sys
import os
import time
from hashlib import sha256
from pathlib import Path
from pprint import pprint, pformat

from odfdo import Document
from PIL import Image
import pandas as pd
# import ezodf

# %% ../../../nbs/01.parsing.ms_office.marker.ipynb 5
from dotenv import load_dotenv
load_dotenv()
OPENROUTER_API_KEY= os.getenv('OPENROUTER_API_KEY')
# print(OPENROUTER_API_KEY)
OPENROUTER_API_URL = os.getenv('OPENROUTER_API_URL')
# print(OPENROUTER_API_URL)
# OPENROUTER_MODEL = os.getenv('OPENROUTER_MODEL')
OPENROUTER_MODEL = 'Google:gemini-2.5-pro-exp-03-25'
# print(OPENROUTER_MODEL)

# %% ../../../nbs/01.parsing.ms_office.marker.ipynb 6
def convert_office_to_pdf(root_folder):
    """
    Recursively convert all .pptx, .ppt, .docx, and .doc files under
    root_folder (and subfolders) to PDF files in the same folder as the
    original. For .xls and .xlsx files, convert to markdown (.md) files
    in the same folder. Requires LibreOffice (soffice) installed for Office
    document conversion. Requires pandas for Excel to markdown.
    """
    import subprocess
    from pathlib import Path
    import pandas as pd

    office_exts = {'.pptx', '.ppt', '.docx', '.doc'}
    excel_exts = {'.xls', '.xlsx'}
    root = Path(root_folder)
    for file in root.rglob('*'):
        if file.suffix.lower() in office_exts:
            pdf_path = file.with_suffix('.pdf')
            if pdf_path.exists():
                continue  # Skip if PDF already exists
            try:
                # Use soffice for conversion
                subprocess.run([
                    'soffice', '--headless', '--convert-to', 'pdf',
                    '--outdir', str(file.parent), str(file)
                ], check=True)
                print(f"Converted: {file} -> {pdf_path}")
            except subprocess.CalledProcessError as e:
                print(f"Failed to convert {file}: {e}")
        elif file.suffix.lower() in excel_exts:
            md_path = file.with_suffix('.md')
            if md_path.exists():
                continue
            try:
                excel = pd.read_excel(file, sheet_name=None)
                with open(md_path, 'w', encoding='utf-8') as f:
                    for sheet, df in excel.items():
                        f.write(f'# Sheet: {sheet}\n\n')
                        f.write(df.to_markdown(index=False))
                        f.write('\n\n')
                print(f"Converted: {file} -> {md_path}")
            except Exception as e:
                print(f"Failed to convert {file} to markdown: {e}")
        else:
                print(f"Failed to convert {file}")


# %% ../../../nbs/01.parsing.ms_office.marker.ipynb 8
def convert_excel_to_markdown(file_path):
    """
    Convert an Excel file to a markdown file.
    """
    try:
        excel = pd.read_excel(file_path, sheet_name=None)
        md_path = file_path.with_suffix('.md')
        with open(md_path, 'w', encoding='utf-8') as f:
            for sheet, df in excel.items():
                f.write(f'# Sheet: {sheet}\n\n')
                f.write(df.to_markdown(index=True))
                f.write('\n\n')
        print(f"Converted: {file_path} -> {md_path}")
    except Exception as e:
        print(f"Failed to convert {file_path} to markdown: {e}")

# convert_excel_to_markdown(Path('../res/conversion_test/test.xlsx'))  # Example usage

# %% ../../../nbs/01.parsing.ms_office.marker.ipynb 10
def convert_pdf_to_markdown_with_marker(root_folder):
    """
    Recursively convert all .pdf files under root_folder (and subfolders)
    to markdown (.md) files in the same folder using marker-pdf's 'marker' command
    with 4 workers.
    """
    import subprocess
    from pathlib import Path
    # import os

    root = Path(root_folder)
    md_root = root / '.md'
    for file in root.rglob('*.pdf'):
        md_path = file.with_suffix('.md')
        md_path = md_root / md_path.relative_to(root) # store the result md files into a separate path of 'root/.md'
        if md_path.exists():
            continue  # Skip if markdown already exists
        try:
            # subprocess.run([
            #     'marker_single', str(file), '--output_dir', file.parent, 
            #     '--use_llm',
            #     f'--gemini_api_key={GEMINI_KEY}',
            # ], check=True)
            #subprocess.run([
            #    'marker_single', str(file), '--output_dir', file.parent, 
            #    '--llm_service=marker.services.ollama.OllamaService',
            #    '--ollama_base_url=http://172.27.74.15:11434',
            #    '--ollama_model=gemma3:27b',
            #], check=True)
            subprocess.run([
                'marker_single', str(file), '--output_dir', md_path.parent, 
                '--llm_service=marker.services.openai.OpenAIService',
                f'--openai_api_key={OPENROUTER_API_KEY}',
                f'--openai_model={OPENROUTER_MODEL}',
                f'--openai_base_url={OPENROUTER_API_URL}',
            ], check=True)
            print(f"Converted: {file} -> {md_path}")
        except subprocess.CalledProcessError as e:
            print(f"Failed to convert {file}: {e}")

# %% ../../../nbs/01.parsing.ms_office.marker.ipynb 12
def convert_excel_to_markdown_with_marker(root_folder):
    """
    Recursively convert all .excel files under root_folder (and subfolders)
    to markdown (.md) files in the same folder using marker-pdf's 'marker' command
    with 4 workers.
    """
    import subprocess
    from pathlib import Path
    # import os

    root = Path(root_folder)
    md_root = root / '.md'
    for file in root.rglob('*.xlsx'):
        md_path = file.with_suffix('.md')
        md_path = md_root / md_path.relative_to(root) # store the result md files into a separate path of 'root/.md'
        if md_path.exists():
            continue  # Skip if markdown already exists
        try:
            # subprocess.run([
            #     'marker_single', str(file), '--output_dir', file.parent, 
            #     '--use_llm',
            #     f'--gemini_api_key={GEMINI_KEY}',
            # ], check=True)
            #subprocess.run([
            #    'marker_single', str(file), '--output_dir', file.parent, 
            #    '--llm_service=marker.services.ollama.OllamaService',
            #    '--ollama_base_url=http://172.27.74.15:11434',
            #    '--ollama_model=gemma3:27b',
            #], check=True)
            subprocess.run([
                'marker_single', str(file), '--output_dir', md_path.parent, 
                '--llm_service=marker.services.openai.OpenAIService',
                f'--openai_api_key={OPENROUTER_API_KEY}',
                f'--openai_model={OPENROUTER_MODEL}',
                f'--openai_base_url={OPENROUTER_API_URL}',
            ], check=True)
            print(f"Converted: {file} -> {md_path}")
        except subprocess.CalledProcessError as e:
            print(f"Failed to convert {file}: {e}")
